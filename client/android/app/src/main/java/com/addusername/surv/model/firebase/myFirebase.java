package com.addusername.surv.model.firebase;

import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.media.AudioAttributes;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Build;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.core.app.NotificationCompat;

import com.addusername.surv.R;
import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.RemoteMessage;

import java.util.Random;

/**
 * This class controls the whole Firebase Cloud Messaging, there are 2 tipes of mssg, keyword:
 * "notification": BAD, creates its own nofication, this.onMessageReceived() just get called when app
 * is in foreground.
 * "data": GOOD, it works as you expect, but you have to build the notification (if you wish), fair enough
 *
 *  HTTP REQUEST FROM SPRING BOOT TO GOOGLE LOOKS LIKE:
 *  curl --location --request POST 'https://fcm.googleapis.com/fcm/send' \
 * --header 'Authorization: key=APP_AUTH_KEY' \
 * --header 'Content-Type: application/json' \
 * --data-raw '{
 *     "to": "THIS_ANDROID_KEY",
 *     "data": {
 *         "action": "STREAM",
 *         "body": "messageBody",
 *         "title": "messageTitle",
 *         "image": "https://img.imgur.com/TCR01S5.png",
 *         "rpiId": 2,
 *         "extension": "H264"
 *     }
 * }'
 *
 * TODO "data" obj could include FPS and TIME duration of the stream, but if stream is generated by
 *  the user (is not a detection thing initiated by RPi) FCM is not involved, so this necessary extra data
 *  should be received as response by UserModel
 */
public class myFirebase extends FirebaseMessagingService {

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    public void onMessageReceived(@NonNull RemoteMessage remoteMessage) {
        super.onMessageReceived(remoteMessage);
        if (remoteMessage.getNotification() != null) {
            Log.d("noti","mssg received(), body: " + remoteMessage.getNotification().getBody());
        }
        String rpiId = remoteMessage.getData().get("rpiId") ;
        String extension = remoteMessage.getData().get("extension") ;
        String body = remoteMessage.getData().get("body") ;
        String title = remoteMessage.getData().get("title") ;
        String image = remoteMessage.getData().get("image") ;
        Log.d("noti",rpiId+extension+body+title+image);

        Intent intent = null;
        switch (remoteMessage.getData().get("action")){
            case "STREAM":
                Log.d("noti","STREAM");
                intent = new Intent("com.addusername.surv.STREAM");
                intent.putExtra("rpiId", rpiId);
                intent.putExtra("extension", extension);
                intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
                break;
            case "INFO":
                break;
        }
        PendingIntent pendingIntent = PendingIntent.getActivity(getApplicationContext(), new Random().nextInt(), intent, PendingIntent.FLAG_ONE_SHOT);

        String id = "_channel_01";

        int importance = NotificationManager.IMPORTANCE_LOW;
        NotificationChannel mChannel = new NotificationChannel(id, "notification", importance);
        AudioAttributes audioAttributes = new AudioAttributes.Builder()
                .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
                .setUsage(AudioAttributes.USAGE_NOTIFICATION)
                .build();
        mChannel.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION), audioAttributes);

        NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this,id);
        notificationBuilder.setContentTitle(title);
        notificationBuilder.setContentText(body);
        notificationBuilder.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));

        if(image !=null){
            Bitmap img = UtilsMyFirebase.getImg(image);
            notificationBuilder.setStyle(new NotificationCompat.BigPictureStyle().bigPicture(img));
        }

        notificationBuilder.setAutoCancel(true);
        notificationBuilder.setSmallIcon(R.mipmap.ic_launcher);
        notificationBuilder.setContentIntent(pendingIntent);
        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        notificationManager.createNotificationChannel(mChannel);
        notificationManager.notify(0, notificationBuilder.build());
    }
}
